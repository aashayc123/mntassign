{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","TableRow","props","city","ustate","population","MyApp","state","sortby","data","e","preventDefault","form","document","querySelector","elements","member","value","reset","newData","this","slice","push","setState","by","sorting","tableShow","sort","a","b","map","item","onSubmit","addRow","htmlFor","id","name","type","maxLength","required","onClick","renderTable","React","Component","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"0PAsGeA,MAnGf,WACE,SAASC,EAASC,GAChB,OACE,+BACE,6BAAKA,EAAMC,OACX,6BAAKD,EAAME,SACX,6BAAKF,EAAMG,gBANJ,IAWPC,EAXO,kDAYX,WAAYJ,GAAQ,IAAD,8BACjB,cAAMA,IACDK,MAAQ,CAAEC,OAAQ,OAAQC,KAC7B,CAAC,CAACN,KAAM,UAAWC,OAAQ,WAAYC,WAAY,SACnD,CAACF,KAAM,UAAWC,OAAQ,QAASC,WAAY,SAC/C,CAACF,KAAM,cAAeC,OAAQ,aAAcC,WAAY,SACxD,CAACF,KAAM,UAAWC,OAAQ,UAAWC,WAAY,WANlC,EAZR,0CAqBX,SAAOK,GACLA,EAAEC,iBACF,IAAMC,EAAOC,SAASC,cAAc,QAAQC,SACtCC,EAAS,CAAEb,KAAMS,EAAKT,KAAKc,MAAOb,OAAQQ,EAAKR,OAAOa,MAAOZ,WAAYO,EAAKP,WAAWY,OAC/FJ,SAASC,cAAc,QAAQI,QAC/B,IAAMC,EAAUC,KAAKb,MAAME,KAAKY,QAChCF,EAAQG,KAAKN,GACbI,KAAKG,SAAS,CAAEf,OAASY,KAAKb,MAAMC,OAAQC,KAAMU,MA5BzC,kBA+BX,SAAKK,GACHJ,KAAKG,SAAL,2BAAkBH,KAAKb,OAAvB,IAA8BC,OAAQgB,OAhC7B,yBAmCX,WACE,IAAMC,EAASL,KAAKb,MAAMC,OASpBkB,EARYN,KAAKb,MAAME,KAAKkB,MAAK,SAASC,EAAEC,GAChD,OAAID,EAAEH,GAAWI,EAAEJ,GACV,EACLG,EAAEH,GAAWI,EAAEJ,IACT,EACH,KAGmBK,KAAK,SAAAC,GAAI,OACnC,cAAE9B,EAAF,CACIE,KAAM4B,EAAK5B,KACXC,OAAQ2B,EAAK3B,OACbC,WAAY0B,EAAK1B,YACZ0B,EAAK5B,SAIhB,OACE,gCACGuB,MAxDI,oBA6DX,WAAU,IAAD,OACP,OACE,gCACA,uBAAMM,SAAU,SAACtB,GAAD,OAAO,EAAKuB,OAAOvB,IAAnC,UACE,uBAAOwB,QAAQ,OAAf,qBACA,uBAAOC,GAAG,OAAOC,KAAK,OAAOC,KAAK,OAAOC,UAAU,KAAKC,UAAQ,IAAG,uBACnE,uBAAOL,QAAQ,SAAf,mBACA,uBAAOC,GAAG,SAASC,KAAK,SAASC,KAAK,OAAOC,UAAU,KAAKC,UAAQ,IAAG,uBACvE,uBAAOL,QAAQ,aAAf,wBACA,uBAAOC,GAAG,aAAaC,KAAK,aAAaC,KAAK,SAASE,UAAQ,IAAG,uBAClE,uBAAOJ,GAAG,SAASE,KAAK,SAASpB,MAAM,oBAEzC,8BACE,4FAEF,kCACE,gCACE,+BACE,6BAAI,wBAAQuB,QAAS,kBAAM,EAAKb,KAAK,SAAjC,oBACJ,uCACA,6BAAI,wBAAQa,QAAS,kBAAM,EAAKb,KAAK,eAAjC,+BAGPP,KAAKqB,wBApFD,GAWOC,IAAMC,WAiF1B,OACE,qBAAKC,UAAU,MAAf,SACE,cAACtC,EAAD,OCrFSuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3C,SAAS4C,eAAe,SAM1BZ,M","file":"static/js/main.f8ab1fd9.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App() {\n  function TableRow(props) {\n    return (\n      <tr>\n        <td>{props.city}</td>\n        <td>{props.ustate}</td>\n        <td>{props.population}</td>\n      </tr>\n    );\n  }\n\n  class MyApp extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = { sortby: \"city\", data:\n        [{city: \"Chicago\", ustate: \"Illinois\", population: 2836658},\n        {city: \"Houston\", ustate: \"Texas\", population: 2208180},\n        {city: \"Los Angeles\", ustate: \"California\", population: 3834430},\n        {city: \"Phoenix\", ustate: \"Arizona\", population: 1552259}]}\n    };\n\n    addRow(e) {\n      e.preventDefault();\n      const form = document.querySelector('form').elements;\n      const member = { city: form.city.value, ustate: form.ustate.value, population: form.population.value}\n      document.querySelector('form').reset();\n      const newData = this.state.data.slice();\n      newData.push(member);\n      this.setState({ sortby : this.state.sortby, data: newData});\n    };\n\n    sort(by) {\n      this.setState({...this.state, sortby: by});\n    };\n\n    renderTable() {\n      const sorting= this.state.sortby;\n      const tableSort = this.state.data.sort(function(a,b) {\n        if (a[sorting] > b[sorting])\n          return 1;\n        if (a[sorting] < b[sorting])\n          return -1;\n        return 0;\n      });\n\n      const tableShow = tableSort.map( item =>\n        < TableRow \n            city={item.city}\n            ustate={item.ustate}\n            population={item.population}\n            key={item.city}\n        />\n        );\n\n      return (\n        <tbody>\n          {tableShow}\n        </tbody>\n      )\n    };\n\n    render() {\n      return (\n        <div>\n        <form onSubmit={(e) => this.addRow(e)}>\n          <label htmlFor=\"city\">US City</label>\n          <input id=\"city\" name=\"city\" type=\"text\" maxLength=\"30\" required /><br />\n          <label htmlFor=\"ustate\">State</label>\n          <input id=\"ustate\" name=\"ustate\" type=\"text\" maxLength=\"30\" required /><br />\n          <label htmlFor=\"population\">Population</label>\n          <input id=\"population\" name=\"population\" type=\"number\" required /><br />\n          <input id=\"submit\" type=\"submit\" value=\"Add to table\"/>\n        </form>\n        <div>\n          <p>You can sort the table by clicking on city or population.</p>\n        </div>\n        <table>\n          <thead>\n            <tr>\n              <th><button onClick={() => this.sort(\"city\")}>City</button></th>\n              <th>State</th>\n              <th><button onClick={() => this.sort(\"population\")}>Population</button></th>\n            </tr>\n          </thead>\n          {this.renderTable()}\n        </table>\n        </div>\n      )\n    }\n  };\n  \n  \n  return (\n    <div className=\"App\">\n      <MyApp />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}